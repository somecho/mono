(ql:quickload :mono)
(use-package :arrows)

(defparameter w 1000)
(defparameter h 1000)
(defparameter proj (kit.glm:ortho-matrix 0 w h 0 -1 1))

(defun flatvec (seqs)
  (reduce (lambda (a b) (concatenate 'simple-vector a b)) seqs))

(defparameter num-pts 50)
(defparameter vao nil)
(defparameter points
  (let ((start (kit.glm:vec (* w 0.2) (* h 0.2) 0.0))
        (end (kit.glm:vec (* w 0.8) (* h 0.2) 0.0))
        (pts (make-array 0 :adjustable t :fill-pointer 0)))
    (dotimes (i num-pts)
      (vector-push-extend
       (kit.glm:vec-lerp start end (/ i (- num-pts 1.0)))
       pts))
    (flatvec pts)))

(defparameter vao-exp nil)
(defparameter pts-exp
  (let ((start (kit.glm:vec (* w 0.2) (* h 0.25) 0.0))
        (end (kit.glm:vec (* w 0.8) (* h 0.25) 0.0))
        (pts (make-array 0 :adjustable t :fill-pointer 0)))
    (dotimes (i num-pts)
      (let ((j (expt (/ i (- num-pts 1.0)) 3)))
        (vector-push-extend (kit.glm:vec-lerp start end j) pts)))
    (flatvec pts)))

(defparameter ls-vao nil)
(defparameter line-strip-pts
  (let ((p1 (kit.glm:vec (* w 0.2) (* h 0.4) 0.0))
        (p2 (kit.glm:vec (* w 0.8) (* h 0.4) 0.0))
        (q1 (kit.glm:vec (* w 0.2) (* h 0.45) 0.0))
        (q2 (kit.glm:vec (* w 0.8) (* h 0.45) 0.0))
        (pts (make-array 0 :adjustable t :fill-pointer 0)))
    (dotimes (i num-pts)
      (let* ((dt (expt (/ i (- num-pts 1.0)) 1.5))
             (pt1 (kit.glm:vec-lerp p1 p2 dt))
             (pt2 (kit.glm:vec-lerp q1 q2 dt)))
        (vector-push-extend pt1 pts)
        (vector-push-extend pt2 pts)))
    (flatvec pts)))

(defparameter arc-vao nil)
(defparameter arc-strip-pts
  (let ((theta1 0.0)
        (theta2 mono:pi-f)
        (r1 150)
        (r2 300)
        (x (* w 0.5))
        (y (* h 0.55))
        (pts (make-array 0 :adjustable t :fill-pointer 0)))
    (dotimes (i num-pts)
      (let* ((u (expt (/ i (- num-pts 1.0)) 2.0))
             (theta (* u (- theta2 theta1)))
             (x1 (-> theta cos (* r1) (+ x)))
             (y1 (-> theta sin (* r1) (+ y)))
             (x2 (-> theta cos (* r2) (+ x)))
             (y2 (-> theta sin (* r2) (+ y))))
        (vector-push-extend x1 pts)
        (vector-push-extend y1 pts)
        (vector-push-extend 0.0 pts)
        (vector-push-extend x2 pts)
        (vector-push-extend y2 pts)
        (vector-push-extend 0.0 pts)))
    pts))

(mono:start (:vertex-shader mono:+vs-projection+
             :samples 8)
  (mono:with-buffers (vbo vbo-exp ls-vbo arc-vbo)
    (setf vao (gl:gen-vertex-array))
    (gl:bind-vertex-array vao)
    (mono:write-array-buffer vbo (mono:gl-array points))
    (gl:vertex-attrib-pointer 0 3 :float :false (mono:size-of :float 3) 0)
    (gl:enable-vertex-attrib-array 0)
    (setf vao-exp (gl:gen-vertex-array))
    (gl:bind-vertex-array vao-exp)
    (mono:write-array-buffer vbo-exp (mono:gl-array pts-exp))
    (gl:vertex-attrib-pointer 0 3 :float :false (mono:size-of :float 3) 0)
    (gl:enable-vertex-attrib-array 0)
    (setf ls-vao (gl:gen-vertex-array))
    (gl:bind-vertex-array ls-vao)
    (mono:write-array-buffer ls-vbo (mono:gl-array line-strip-pts))
    (gl:vertex-attrib-pointer 0 3 :float :false (mono:size-of :float 3) 0)
    (gl:enable-vertex-attrib-array 0)
    (setf arc-vao (gl:gen-vertex-array))
    (gl:bind-vertex-array arc-vao)
    (mono:write-array-buffer arc-vbo (mono:gl-array arc-strip-pts))
    (gl:vertex-attrib-pointer 0 3 :float :false (mono:size-of :float 3) 0)
    (gl:enable-vertex-attrib-array 0)
    (mono:with-loop
      (gl:clear :color-buffer-bit)
      (let* ((delay 50)
             (start (-> mono::frame-num
                     (mod (+ num-pts delay))
                     (- delay)
                     (mono:clamp 0 num-pts)))
             (end (mono:clamp (mod mono::frame-num (+ num-pts delay)) 0 (- num-pts start))))
        (mono:uniform-mat4f "projectionMatrix" (kit.glm:transpose-matrix proj))
        (gl:bind-vertex-array vao)
        (gl:draw-arrays :points start end)
        (gl:bind-vertex-array vao-exp)
        (gl:draw-arrays :points start end)
        (gl:bind-vertex-array ls-vao)
        (gl:draw-arrays :triangle-strip (* 2 start) (* end 2))
        (gl:bind-vertex-array arc-vao)
        (gl:draw-arrays :triangle-strip (* 2 start) (* end 2))
        (let* ((transl (kit.glm:translate* 0.0 (* w 0.1) 0.0))
               (mat (kit.glm:matrix* proj transl)))
          (mono:uniform-mat4f "projectionMatrix" (kit.glm:transpose-matrix mat))
          (gl:bind-vertex-array vao)
          (gl:draw-arrays :line-strip start end)
          (gl:bind-vertex-array vao-exp)
          (gl:draw-arrays :line-strip start end))))))
