(ql:quickload '(:mono :easing :black-tie))
(use-package :arrows :black-tie)

(defparameter num-pts 100)
(defparameter w 1000)
(defparameter h 1000)
(defparameter seed (random 10000))
(defparameter proj (kit.glm:ortho-matrix 0 w 0 h -1 1))
(defparameter persp (kit.glm:perspective-matrix 45 (/ w h) 0.1 100.0))
(defparameter cam (make-instance 'mono:camera :pos (kit.glm:vec3 3.0)))

(defparameter strip
  (let ((p1 (kit.glm:vec (* w 0.2) (* h 0.4) 0.0))
        (p2 (kit.glm:vec (* w 0.8) (* h 0.4) 0.0))
        (q1 (kit.glm:vec (* w 0.2) (* h 0.45) 0.0))
        (q2 (kit.glm:vec (* w 0.8) (* h 0.45) 0.0))
        (pts (mono:empty-vec)))
    (dotimes (i num-pts)
      (let* ((dt (ease-f:in-out-exp (/ i (- num-pts 1.0))))
             (pt1 (kit.glm:vec-lerp p1 p2 dt))
             (pt2 (kit.glm:vec-lerp q1 q2 dt)))
        (mono:push pts pt1)
        (mono:push pts pt2)))
    (mono:flat-vec pts)))

(defun fan-points (time num-points)
  (let* ((v (make-array (* num-points 3))))
    (dotimes (i num-points)
      (let* ((r 1.0)
             (theta (-> (black-tie:simplex-noise-3d-sf (* i 0.0025)
                                                       (* time 0.001)
                                                       (+ seed 123.0))
                        (* 0.5)
                        (+ 0.5)
                        (* mono:pi-f)))
             (phi (-> (black-tie:simplex-noise-3d-sf 876.123
                                                     (* i 0.0025)
                                                     (* time 0.008))
                      (* mono:pi-f 2.0)))
             (xyz (mono:sphere-xyz* r theta phi)))
        (setf (aref v (* i 3)) (aref xyz 0))
        (setf (aref v (+ (* i 3) 1)) (aref xyz 1))
        (setf (aref v (+ (* i 3) 2)) (aref xyz 2))))
    v))

(mono:start (:width w :height h :vertex-shader mono:+vs-projection+)
  (mono:with-gl-resources (:buffers (vbo fan-vbo) :vertex-arrays (vao fan-vao))
    (mono:with-vao vao
      (gl:bind-buffer :array-buffer vbo)
      (mono:set-vertex-attrib 3))
    (mono:with-vao fan-vao
      (gl:bind-buffer :array-buffer fan-vbo)
      (mono:set-vertex-attrib 3))
    (mono:with-loop
      (let* ((n-strip 1000)
             (sampled (mono:concat-calls (lambda () (mono:sample-tri-strip strip)) n-strip))
             (mat (kit.glm:matrix* persp (mono::view-mat cam)))
             (n-fan 10000)
             (fan-size 1000)
             (fan-pts (fan-points mono::frame-num fan-size))
             (fan-samples (mono:concat-calls (lambda () (mono:sample-tri-fan fan-pts)) n-fan)))
        (gl:clear :color-buffer-bit)
        (mono:uniform-mat4f "projectionMatrix" (kit.glm:transpose-matrix proj))
        (mono:write-array-buffer vbo (mono:gl-array sampled))
        (mono:with-vao vao (gl:draw-arrays :points 0 n-strip))
        (mono:uniform-mat4f "projectionMatrix" (kit.glm:transpose-matrix mat))
        (mono:write-array-buffer fan-vbo (mono:gl-array fan-samples))
        (mono:with-vao fan-vao (gl:draw-arrays :points 0 n-fan))))))
